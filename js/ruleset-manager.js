"use strict";import{browser,dnr,i18n}from"./ext.js";import{fetchJSON}from"./fetch.js";import{ubolLog}from"./utils.js";const RULE_REALM_SIZE=1e6,REGEXES_REALM_START=1e6,REGEXES_REALM_END=REGEXES_REALM_START+1e6,REMOVEPARAMS_REALM_START=REGEXES_REALM_END,REMOVEPARAMS_REALM_END=REMOVEPARAMS_REALM_START+1e6,REDIRECT_REALM_START=REMOVEPARAMS_REALM_END,REDIRECT_REALM_END=REDIRECT_REALM_START+1e6,MODIFYHEADERS_REALM_START=REDIRECT_REALM_END,MODIFYHEADERS_REALM_END=MODIFYHEADERS_REALM_START+1e6,TRUSTED_DIRECTIVE_BASE_RULE_ID=8e6;function getRulesetDetails(){return void 0!==getRulesetDetails.rulesetDetailsPromise||(getRulesetDetails.rulesetDetailsPromise=fetchJSON("/rulesets/ruleset-details").then((e=>new Map(e.map((e=>[e.id,e])))))),getRulesetDetails.rulesetDetailsPromise}function getDynamicRules(){return void 0!==getDynamicRules.dynamicRuleMapPromise||(getDynamicRules.dynamicRuleMapPromise=dnr.getDynamicRules().then((e=>{const s=new Map(e.map((e=>[e.id,e])));return ubolLog(`Dynamic rule count: ${s.size}`),ubolLog("Available dynamic rule count: "+(dnr.MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES-s.size)),s}))),getDynamicRules.dynamicRuleMapPromise}async function pruneInvalidRegexRules(e,s){const t=await dnr.getDynamicRules(),i=new Set(t.filter((e=>!!e.condition?.regexFilter)).map((e=>e.condition.regexFilter))),n=[],o=[];for(const e of s){if(void 0===e.condition?.regexFilter){n.push(!0);continue}const{regexFilter:s,isUrlFilterCaseSensitive:t}=e.condition;i.has(s)?n.push(!0):n.push(dnr.isRegexSupported({regex:s,isCaseSensitive:t}).then((e=>!!e.isSupported||(o.push(`\t${s}  ${e.reason}`),!1))))}const r=await Promise.all(n);return 0!==o.length&&ubolLog(`${e} realm: rejected regexes:\n`,o.join("\n")),s.filter(((e,s)=>r[s]))}async function updateRegexRules(){const e=await getEnabledRulesetsDetails(),s=[];for(const t of e)0!==t.rules.regex&&s.push(fetchJSON(`/rulesets/regex/${t.id}`));const t=await Promise.all(s),i=[];let n=REGEXES_REALM_START;for(const e of t)if(!1!==Array.isArray(e))for(const s of e)s.id=n++,i.push(s);const o=await pruneInvalidRegexRules("regexes",i),r=await getDynamicRules(),a=new Map(o.map((e=>[e.id,e]))),l=[],u=[];for(const e of r.values()){if(e.id<REGEXES_REALM_START)continue;if(e.id>=REGEXES_REALM_END)continue;const s=a.get(e.id);void 0===s?(u.push(e.id),r.delete(e.id)):JSON.stringify(e)!==JSON.stringify(s)&&(u.push(e.id),l.push(s),r.set(e.id,s))}for(const e of a.values())r.has(e.id)||(l.push(e),r.set(e.id,e));if(0!==l.length||0!==u.length)return 0!==u.length&&ubolLog(`Remove ${u.length} DNR regex rules`),0!==l.length&&ubolLog(`Add ${l.length} DNR regex rules`),dnr.updateDynamicRules({addRules:l,removeRuleIds:u}).catch((e=>{console.error(`updateRegexRules() / ${e}`)}))}async function updateRemoveparamRules(){const[e,s,t]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails(),getDynamicRules()]),i=[];for(const e of s)0!==e.rules.removeparam&&i.push(fetchJSON(`/rulesets/removeparam/${e.id}`));const n=await Promise.all(i),o=[];if(e){let e=REMOVEPARAMS_REALM_START;for(const s of n)if(!1!==Array.isArray(s))for(const t of s)t.id=e++,o.push(t)}const r=await pruneInvalidRegexRules("removeparam",o),a=new Map(r.map((e=>[e.id,e]))),l=[],u=[];for(const e of t.values()){if(e.id<REMOVEPARAMS_REALM_START)continue;if(e.id>=REMOVEPARAMS_REALM_END)continue;const s=a.get(e.id);void 0===s?(u.push(e.id),t.delete(e.id)):JSON.stringify(e)!==JSON.stringify(s)&&(u.push(e.id),l.push(s),t.set(e.id,s))}for(const e of a.values())t.has(e.id)||(l.push(e),t.set(e.id,e));if(0!==l.length||0!==u.length)return 0!==u.length&&ubolLog(`Remove ${u.length} DNR removeparam rules`),0!==l.length&&ubolLog(`Add ${l.length} DNR removeparam rules`),dnr.updateDynamicRules({addRules:l,removeRuleIds:u}).catch((e=>{console.error(`updateRemoveparamRules() / ${e}`)}))}async function updateRedirectRules(){const[e,s,t]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails(),getDynamicRules()]),i=[];for(const e of s)0!==e.rules.redirect&&i.push(fetchJSON(`/rulesets/redirect/${e.id}`));const n=await Promise.all(i),o=[];if(e){let e=REDIRECT_REALM_START;for(const s of n)if(!1!==Array.isArray(s))for(const t of s)t.id=e++,o.push(t)}const r=await pruneInvalidRegexRules("redirect",o),a=new Map(r.map((e=>[e.id,e]))),l=[],u=[];for(const e of t.values()){if(e.id<REDIRECT_REALM_START)continue;if(e.id>=REDIRECT_REALM_END)continue;const s=a.get(e.id);void 0===s?(u.push(e.id),t.delete(e.id)):JSON.stringify(e)!==JSON.stringify(s)&&(u.push(e.id),l.push(s),t.set(e.id,s))}for(const e of a.values())t.has(e.id)||(l.push(e),t.set(e.id,e));if(0!==l.length||0!==u.length)return 0!==u.length&&ubolLog(`Remove ${u.length} DNR redirect rules`),0!==l.length&&ubolLog(`Add ${l.length} DNR redirect rules`),dnr.updateDynamicRules({addRules:l,removeRuleIds:u}).catch((e=>{console.error(`updateRedirectRules() / ${e}`)}))}async function updateModifyHeadersRules(){const[e,s,t]=await Promise.all([browser.permissions.contains({origins:["<all_urls>"]}),getEnabledRulesetsDetails(),getDynamicRules()]),i=[];for(const e of s)0!==e.rules.modifyHeaders&&i.push(fetchJSON(`/rulesets/modify-headers/${e.id}`));const n=await Promise.all(i),o=[];if(e){let e=MODIFYHEADERS_REALM_START;for(const s of n)if(!1!==Array.isArray(s))for(const t of s)t.id=e++,o.push(t)}const r=await pruneInvalidRegexRules("modify-headers",o),a=new Map(r.map((e=>[e.id,e]))),l=[],u=[];for(const e of t.values()){if(e.id<MODIFYHEADERS_REALM_START)continue;if(e.id>=MODIFYHEADERS_REALM_END)continue;const s=a.get(e.id);void 0===s?(u.push(e.id),t.delete(e.id)):JSON.stringify(e)!==JSON.stringify(s)&&(u.push(e.id),l.push(s),t.set(e.id,s))}for(const e of a.values())t.has(e.id)||(l.push(e),t.set(e.id,e));if(0!==l.length||0!==u.length)return 0!==u.length&&ubolLog(`Remove ${u.length} DNR modifyHeaders rules`),0!==l.length&&ubolLog(`Add ${l.length} DNR modifyHeaders rules`),dnr.updateDynamicRules({addRules:l,removeRuleIds:u}).catch((e=>{console.error(`updateModifyHeadersRules() / ${e}`)}))}async function updateDynamicRules(){return Promise.all([updateRegexRules(),updateRemoveparamRules(),updateRedirectRules(),updateModifyHeadersRules()])}async function defaultRulesetsFromLanguage(){const e=["default"],s=e=>{const s=e.indexOf("-");return-1===s?e:e.slice(0,s)},t=new Set;for(const e of navigator.languages.map(s))t.add(e);t.add(s(i18n.getUILanguage()));const i=new RegExp(`\\b(${Array.from(t).join("|")})\\b`),n=await getRulesetDetails();for(const[s,t]of n)"string"==typeof t.lang&&!1!==i.test(t.lang)&&e.push(s);return e}async function enableRulesets(e){const s=new Set(e),t=new Set(await dnr.getEnabledRulesets()),i=new Set,n=new Set;for(const e of s)t.has(e)||i.add(e);for(const e of t)s.has(e)||n.add(e);if(0===i.size&&0===n.size)return;const o=await getRulesetDetails();for(const e of i)o.has(e)||i.delete(e);for(const e of n)o.has(e)||n.delete(e);const r=Array.from(i),a=Array.from(n);return 0!==r.length&&ubolLog(`Enable rulesets: ${r}`),0!==a.length&&ubolLog(`Disable ruleset: ${a}`),await dnr.updateEnabledRulesets({enableRulesetIds:r,disableRulesetIds:a}),updateDynamicRules()}async function getEnabledRulesetsDetails(){const[e,s]=await Promise.all([dnr.getEnabledRulesets(),getRulesetDetails()]),t=[];for(const i of e){const e=s.get(i);void 0!==e&&t.push(e)}return t}export{TRUSTED_DIRECTIVE_BASE_RULE_ID,getRulesetDetails,getDynamicRules,enableRulesets,defaultRulesetsFromLanguage,getEnabledRulesetsDetails,updateDynamicRules};